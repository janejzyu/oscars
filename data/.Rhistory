factor(sex.marital),random = ~1, data = credit_score.anal )
betabin(cbind(credit, notcredit) ~ ~balance + duration + factor(history) + factor(purpose) +
factor(sex.marital),random = ~history, data = credit_score.anal)
betabin(cbind(credit, notcredit) ~balance + duration + factor(history) + factor(purpose) +
factor(sex.marital),random = ~history, data = credit_score.anal)
betabin(cbind(credit, notcredit) ~balance + duration + factor(history) + factor(purpose) +
factor(sex.marital),random = ~factor(history), data = credit_score.anal)
betabin(cbind(credit, notcredit) ~balance + duration + factor(history) + factor(purpose) +
factor(sex.marital),random = ~(factor(history)), data = credit_score.anal)
betabin_same1 <- betabin(cbind(credit, notcredit) ~balance + duration + factor(history) + factor(purpose) +
factor(sex.marital),random = ~1, data = credit_score.anal )
betabin_same2 <- betabin(cbind(credit, notcredit) ~balance + duration + factor(history) + factor(purpose) ,random = ~1,
data = credit_score.anal )
anova(betabin_same1, betabin_same2)
anova(betabin_same2, betabin_same1)
anova(betabin_same2, betabin_same1, test='Chisq')
betabin_same3 <- betabin(cbind(credit, notcredit) ~balance + duration + factor(history) ,random = ~1,
data = credit_score.anal )
anova(betabin_same3, betabin_same2, test='Chisq')
nrow(credit_score.anal)
nrow(sex.marital==2)
sum(sex.marital==2)
count = 0
for(i in 1:nrow(credit_score.anal)) {
count = count + (sex.marital[i] == 2 & credit[i] == 1)
}
count
anova(betabin_same3, betabin_same2, test='Chisq')
anova(betabin_same2, betabin_same1, test='Chisq')
betabin_same2 <- betabin(cbind(credit, notcredit) ~balance + duration + factor(history) + factor(purpose) ,random = ~1,
data = credit_score.anal )
betabin_same2 <- betabin(cbind(credit, notcredit) ~balance + duration + factor(history) + factor(purpose) ,random = ~1,
data = credit_score.anal )
betabin_same2 <- betabin(credit ~balance + duration + factor(history) + factor(purpose) ,random = ~1,
data = credit_score.anal )
betabin_same2 <- betabin(cbind(credit,notcredit) ~balance + duration + factor(history) + factor(purpose) ,random = ~1,
data = credit_score.anal )
betabin(cbind(credit,notcredit) ~balance + duration + factor(history) + factor(purpose) ,random = ~1,
data = credit_score.anal )
betabin_same3 <- betabin(cbind(credit, notcredit) ~balance + duration + factor(history) ,random = ~1,
data = credit_score.anal )
betabin_same4 <- betabin(cbind(credit, notcredit) ~balance + duration + factor(history) + duration:factor(history) ,random = ~1,
data = credit_score.anal )
anova(betabin_same3, betabin_same4, test = 'Chisq')
library(cars)
library(car)
install.packages("car")
library(car)
av.plots(model5)
avPlots(model5)
avPlots(const_m5)
library(lattice)
xyplot(credit ~ purpose)
library(graphics)
coplot(credit ~ factor(purpose))
coplot(credit ~(purpose))
coplot(credit ~purpose|history)
selection <- step(const_m6, direction = 'backward')
const_m7 <- glm(credit ~ balance + duration +factor(history ) + factor(history):duration +  factor(purpose) ,
family = quasibinomial(link = logit))
const_m8 <- glm(credit ~ balance + duration +factor(history ) + factor(history):duration ,
family = quasibinomial(link = logit))
anova(const_m7, const_m8, test = "Chisq")
const_m3 <- glm(credit ~ balance + duration + factor(history), family = quasibinomial(link = logit))
anova(const_m3, const_m8, test = 'Chisq')
const_m1 <- glm(credit ~ factor(balance), family = quasibinomial(link = logit))
const_m2 <- glm(credit ~ factor(balance) + duration, family = quasibinomial(link = logit))
anova(const_m1, const_m2, test = 'Chisq')
const_m3 <- glm(credit ~ factor(balance) + duration + factor(history), family = quasibinomial(link = logit))
anova(const_m2, const_m3, test = 'Chisq')
const_m4 <- glm(credit ~ factor(balance) + duration + factor(history) + factor(purpose), family = quasibinomial(link = logit))
anova(const_m3,const_m4, test = 'Chisq')
const_m5 <- glm(credit ~ factor(balance) + duration + factor(history) + factor(purpose) + factor(sex.marital),
family = quasibinomial(link = logit))
anova(const_m4, const_m5, test = 'Chisq')
const_m6 <- glm(credit ~ factor(balance) + duration + factor(balance):duration, family = quasibinomial(link = logit))
anova(const_m2, const<m6, test = 'Chisq')
const_m6 <- glm(credit ~ factor(balance) + duration + factor(balance):duration, family = quasibinomial(link = logit))
anova(const_m2, const_m6, test = 'Chisq')
const_m7<- glm(credit ~ factor(balance) + duration + factor(history) + factor(history):duration, family =
quasibinomial(link = logit))
anova(const_m3, const_m7, test = 'Chisq')
const_m8 <- glm(credit ~ factor(balance) + duration + factor(history) + factor(history):duration + factor(purpose), family =
quasibinomial(link = logit))
anova(const_m7, const_m8, test = 'Chisq')
const_m9 <- glm(credit ~ factor(balance) + duration + factor(history) + factor(history):duration + factor(purpose) +
factor(sex.marital), family =
quasibinomial(link = logit))
anova(const_m8, const_m9, test = 'Chisq')
const_m9 <- glm(credit ~ factor(balance) + duration + factor(history) + factor(history):duration + factor(purpose) +
factor(purpose):duration, family =
quasibinomial(link = logit))
anova(const_m8, const_m9, test = 'Chisq')
const_m5 <- glm(credit ~ factor(balance) + duration + factor(history) + factor(purpose) + factor(sex.marital),
family = quasibinomial(link = logit))
const_m10 <- glm(credit ~ factor(balance) + factor(history) + factor(purpose) + factor(sex.marital),
family = quasibinomial(link = logit))
anova(const_m5, const_m10, test = 'Chisq')
unique(credit_score.anal[,-c(1,6,7,8)])
nrow(unique(credit_score.anal[,-c(1,6,7,8)]))
model4 = glm(credit ~ balance + duration + factor(history) + factor(purpose),family = binomial(link = 'logit'))
model5 = glm(credit ~ balance + duration + factor(history) + factor(purpose) + factor(sex.marital), family = binomial(link = 'logit'))
anova(model4, model5, test = 'Chisq')
model4 = glm(credit ~ balance + duration + factor(history) + factor(purpose),family = binomial(link = 'logit'))
summary(model4)
model4 = glm(credit ~-1+ balance + duration + factor(history) + factor(purpose),family = binomial(link = 'logit'))
summary(model4)
unique(purpose)
model4 = glm(credit ~ balance + duration + factor(history) + factor(purpose),family = binomial(link = 'logit'))
summary(model4)
model4 = glm(credit ~ -1 + balance + duration + factor(history) + factor(purpose),family = binomial(link = 'logit'))
summary(model4)
model4 = glm(credit ~ -1 + balance + duration + factor(history) + factor(purpose),family = binomial(link = 'logit'))
summary(model4)
const_m3 <- glm(credit ~ factor(balance) + duration + factor(history), family = quasibinomial(link = logit))
anova(const_m2, const_m3, test = 'Chisq')
const_m4 <- glm(credit ~ factor(balance) + duration + factor(history) + factor(purpose), family = quasibinomial(link = logit))
anova(const_m3,const_m4, test = 'Chisq')
const_m10 <- glm(credit ~ factor(balance) + factor(history) + factor(purpose) + factor(sex.marital),
family = quasibinomial(link = logit))
summary(const_m4)
const_m4 <- glm(credit ~ duration + factor(balance) + factor(history) + factor(purpose), family = quasibinomial(link = logit))
anova(const_m3,const_m4, test = 'Chisq')  # this one
summary(const_m4)
model1 = glm(credit ~ factor(balance), family = binomial(link = 'logit'))
model2 = glm(credit ~ factor(balance) + duration, family = binomial(link = 'logit'))
anova(model1, model2,test = 'Chisq')
model3 = glm(credit ~  factor(balance) + duration + factor(history),family = binomial(link = 'logit'))
anova(model2, model3, test = "Chisq")
model4 = glm(credit ~  balance + duration + factor(history) + factor(purpose),family = binomial(link = 'logit'))
anova(model3, model4, test = "Chisq")
avPlots(model4)
anova(model4, const_m4)
PR = residuals(model4, 'pearson')
hist(PR, breaks = 15)
hist(DR, breaks =15)
DR = residuals(model4, "deviance")
hist(DR, breaks =15)
credit_score.anal$dura_grouped = duration
rep(c(0,1), each  = 4)
rep(c(0,1), 4)
rep(rep(c('F','M'), each = 2), 2)
DiseaseFree = c(3,2,4,1,5,3,5,6)
DiseaseNotFree = c(0,0,0,0,0,2,4,11)
OsteoPathology = rep(c(0,1), 4)
Gender = rep(rep(c('F','M'), each = 2), 2)
LymphoInf = rep(c('high', 'lower'), each = 4)
data = data.frame(LymphoInf  = LymphoInf, Gender = Gender, OsteoPatho = OsteoPathology,
DisFree = DiseaseFree, DisNotFr = DiseaseNotFree )
data
# data for 7.13
DiseaseFree = c(3,2,4,1,5,3,5,6)
DiseaseNotFree = c(0,0,0,0,0,2,4,11)
OsteoPathology = rep(c(0,1), 4)
Gender = rep(rep(c('F','M'), each = 2), 2)
LymphoInf = rep(c('high', 'low'), each = 4)
data = data.frame(LymphoInf  = LymphoInf, Gender = Gender, OsteoPatho = OsteoPathology,
DisFree = DiseaseFree, DisNotFr = DiseaseNotFree )
data
DiseaseFree = c(3,2,4,1,5,3,5,6)
DiseaseNotFree = c(0,0,0,0,0,2,4,11)
OsteoPathology = rep(c('no','yes'), 4)
Gender = rep(rep(c('F','M'), each = 2), 2)
LymphoInf = rep(c('high', 'low'), each = 4)
data = data.frame(LymphoInf  = LymphoInf, Gender = Gender, OsteoPatho = OsteoPathology,
DisFree = DiseaseFree, DisNotFr = DiseaseNotFree )
data
DiseaseFree = c(3,2,4,1,5,3,5,6)
DiseaseNotFree = c(0,0,0,0,0,2,4,11)
OsteoPathology = factor(rep(c('no','yes'), 4))
Gender = factor(rep(rep(c('F','M'), each = 2), 2))
LymphoInf = factor(rep(c('high', 'low'), each = 4))
data = data.frame(LymphoInf  = LymphoInf, Gender = Gender, OsteoPatho = OsteoPathology,
DisFree = DiseaseFree, DisNotFr = DiseaseNotFree )
data
Gender
model.a = glm(cbind(DisFree, DisNotFr) ~ ., family = binomial(link = 'logit'))
model.a = glm(cbind(DisFree, DisNotFr) ~ LymphoInf + Gender + OsteoPathology,
family = binomial(link = 'logit'))
attach(data)
detach(data)
detach(data)
attach(data)
model.a = glm(cbind(DisFree, DisNotFr) ~ LymphoInf + Gender + OsteoPathology,
family = binomial(link = 'logit'))
model.a
library(reshape2)
molten = melt(data, id = c("LymphoInf",'Gender', 'OsteoPathology'))
model.a = glm(cbind(DisFree, DisNotFr) ~ LymphoInf + Gender + OsteoPatho,
family = binomial(link = 'logit'))
summary(molten)
summary(model)
summary(model.a)
molten = melt(data, id = c("LymphoInf",'Gender', 'OsteoPatho'))
molten
cast(molten,LymphoInf + Gender +OsteoPatho ~ variable)
library(reshape2)
cast(molten,LymphoInf + Gender +OsteoPatho ~ variable)
library(reshape)
install.packages("reshape")
library(reshape)
cast(molten,LymphoInf + Gender +OsteoPatho ~ variable)
ungrouped <- data.frame(matrix(0, sum(DisFree + DiseaseNotFree), 5))
ungrouped
names(data)
names(data)[-(4:5)]
names = c(names(data)[-(4:5)], 'Status')
names
ungrped.names = c(names(data)[-(4:5)], 'Status')
molten
detach(data)
detach(data)
attach(molten)
molten$variable[1]
molten$variable[1] == "DisFree"
start_idx = 1
for(k in 1:nrow(molten)) {
end_idx = start_idx + value - 1
for(j in start_idx:end_idx) {
ungrouped[j,1:3] = molten[k, 1:3]
ungrouped[j,4] = ifelse(molten$variable[k] == "DisFree", 'cured','not-cured')
}
start_idx = end_idx + 1
}
warnings()
for(k in 1:nrow(molten)) {
end_idx = start_idx + value[k] - 1
for(j in start_idx:end_idx) {
ungrouped[j,1:3] = molten[k, 1:3]
ungrouped[j,4] = ifelse(molten$variable[k] == "DisFree", 'cured','not-cured')
}
start_idx = end_idx + 1
}
warnings
warnings()
start_idx = 1
for(k in 1:nrow(molten)) {
end_idx = start_idx + value[k] - 1
print(class(start_idx))
for(j in start_idx:end_idx) {
ungrouped[j,1:3] = molten[k, 1:3]
ungrouped[j,4] = ifelse(molten$variable[k] == "DisFree", 'cured','not-cured')
}
start_idx = end_idx + 1
}
start_idx = integer(1)
start_idx
start_idx = as.integer(1)
for(k in 1:nrow(molten)) {
end_idx = start_idx + value[k] - 1
print(class(start_idx))
for(j in start_idx:end_idx) {
ungrouped[j,1:3] = molten[k, 1:3]
ungrouped[j,4] = ifelse(molten$variable[k] == "DisFree", 'cured','not-cured')
}
start_idx = end_idx + 1
}
start_idx = 1L
class(start_idx)
for(k in 1:nrow(molten)) {
end_idx = start_idx + value[k] - 1
print(class(start_idx))
for(j in start_idx:end_idx) {
ungrouped[j,1:3] = molten[k, 1:3]
ungrouped[j,4] = ifelse(molten$variable[k] == "DisFree", 'cured','not-cured')
}
start_idx = end_idx + 1
}
for(k in 1:nrow(molten)) {
end_idx = as.integer(start_idx + value[k] - 1)
print(class(start_idx))
for(j in start_idx:end_idx) {
ungrouped[j,1:3] = molten[k, 1:3]
ungrouped[j,4] = ifelse(molten$variable[k] == "DisFree", 'cured','not-cured')
}
start_idx = end_idx + 1
}
start_idx = 1L
for(k in 1:nrow(molten)) {
end_idx = as.integer(start_idx + value[k] - 1)
print(class(start_idx))
for(j in start_idx:end_idx) {
ungrouped[j,1:3] = molten[k, 1:3]
ungrouped[j,4] = ifelse(molten$variable[k] == "DisFree", 'cured','not-cured')
}
start_idx = end_idx + 1
}
start_idx = 1L
for(k in 1:nrow(molten)) {
end_idx = as.integer(start_idx + value[k] - 1)
print(class(start_idx))
for(j in start_idx:end_idx) {
ungrouped[j,1:3] = molten[k, 1:3]
ungrouped[j,4] = ifelse(molten$variable[k] == "DisFree", 'cured','not-cured')
}
start_idx = as.integer(end_idx + 1)
}
ungrouped
ungrouped <- data.frame(matrix(0, sum(DisFree + DiseaseNotFree), 5), ungrped.names )
attach(data)
ungrouped <- data.frame(matrix(0, sum(DisFree + DiseaseNotFree), 5), ungrped.names )
attach(molten)
attach(molten)
attach(molten)
detach(molten)
detach(molten)
detach(molten)
detach(molten)
(molten)
detach(molten)
#cast(molten,LymphoInf + Gender +OsteoPatho ~ variable)
ungrped.names = c(names(data)[-(4:5)], 'Status')
ungrouped <- data.frame(matrix(0, sum(DisFree + DiseaseNotFree), 5), ungrped.names )
data.frame
?data.frame
ungrped.names = c(names(data)[-(4:5)], 'Status')
ungrouped <- data.frame(matrix(0, sum(DisFree + DiseaseNotFree), 5) )
colnames(ungrouped) <- ungrped.names
ungrouped
ungrped.names = c(names(data)[-(4:5)], 'Status')
ungrouped <- data.frame(matrix(0, sum(DisFree + DiseaseNotFree), 4) )
colnames(ungrouped) <- ungrped.names
ungrouped
start_idx = 1L
for(k in 1:nrow(molten)) {
end_idx = as.integer(start_idx + value[k] - 1)
print(class(start_idx))
for(j in start_idx:end_idx) {
ungrouped[j,1:3] = molten[k, 1:3]
ungrouped[j,4] = ifelse(molten$variable[k] == "DisFree", 'cured','not-cured')
}
start_idx = as.integer(end_idx + 1)
}
attach(molten)
detach(data)
detach(data)
start_idx = 1L
for(k in 1:nrow(molten)) {
end_idx = as.integer(start_idx + value[k] - 1)
print(class(start_idx))
for(j in start_idx:end_idx) {
ungrouped[j,1:3] = molten[k, 1:3]
ungrouped[j,4] = ifelse(molten$variable[k] == "DisFree", 'cured','not-cured')
}
start_idx = as.integer(end_idx + 1)
}
View(ungrouped)
molten[1,1]
labels(molten[1,1])
levels(molten[1,1])
detach(molten)
detach(molten)
attach(data)
detach(molten)
model_lymp <- glm(cbind(DisFree, DisNotFr) ~ LymphoInf, family = binomial(link = 'logit'))
summary(model_lymp)
model_gend <- glm(cbind(DisFree, DisNotFr) ~ Gender, family= binomial(link = 'logit'))
summary(model_gend)
View(data)
model_osteo <- glm(cbind(DisFree, DisNotFr) ~ OsteoPatho, family = binomial(link = 'logit'))
summary(model_osteo)
model.b = glm(cbind(DisFree, DisNotFr) ~ LymphoInf + Gender + OsteoPatho,
family = binomial(link = 'logit'))
source('~/Documents/STA841/HW4/Q1.R', echo=TRUE)
model.b = glm(cbind(DisFree, DisNotFr) ~  Gender + OsteoPatho + LymphoInf,
family = binomial(link = 'logit'))
summary(model.b)
model.b2= glm(cbind(DisFree, DisNotFr) ~  Gender + OsteoPatho + LymphoInf,
family = binomial(link = 'probit'))
sumary(model.b2)
model.b2= glm(cbind(DisFree, DisNotFr) ~  Gender + OsteoPatho + LymphoInf,
family = binomial(link = 'probit'))
summary(model.b2)
?scale
library(wavethresh)
xs = seq(1, 700, length = 512)
lo = floor(xs)
hi = ceiling(xs)
lo(1:10)
lo[1:10]
hi[1:10]
library('WaveThresh')
install.packages('WaveThresh')
install.packages('WaveThresh')
library('wavethresh')
library(wavethresh)
y = c(1,1,7,9,2,8,8,6)
ywd <- wd(y, filter.number = 1, family ='haar')
ywd <- wd(y, filter.number = 1, family ='DabExPhase')
ywd <- wd(y, filter.number = 1, family ='DaubExPhase')
ywd$D
ywd$C
pi
pi * 1000000000
pi * 10000000000
e
exp
exp(1)
y = c(1,1,7,9,2,8,8,6,4)
wd(y, filter.number = 1, family = 'DauvExPhase')
library(wavethresh)
library(wavethresh)
wd(y, filter.number = 1, family = 'DauvExPhase')
wd(y[1:8], filter.number = 1, family = 'DauvExPhase')
wd(y[1:8], filter.number = 1, family = 'DaubExPhase')
ywd = wd(y[1:8], filter.number = 1, family = 'DaubExPhase')
ywd
ywd$C
ywd$D
plot(ywd)
plot(ywd)
1429.45-40.95
load('IMDBdata.Rdata')
setwd("~/Documents/STA841/project/new_project/oscars/data")
load('IMDBdata.Rdata')
attach(IMDBdata)
## missing directornames
MissingNames_index <-which(director_name == '')  ## 39 director names missing!!
# check these one by one
IMDBdata <- IMDBdata[-MissingNames_index,]
save(IMDBdata, file = 'IMDBdata_nomissdirec.RData')
## missing content rating (content rating == '' / 'Unrated')
MissContRate_index = which(IMDBdata$content_rating == '')  ## 237
#range(IMDBdata$imdb_score[MissContRate_index])
#IMDBdata$movie_imdb_link[MissContRate_index]
### I noticed that for observations that have missing content rating, they are
### either TV series (named after an existing movie), or video names (named after
### an existing movie), or foreign movies that are not shown in US cinemas
IMDBdata <- IMDBdata[-MissContRate_index,]
## movies that are unrated are not played in theatre, therefore cannot possibly receive
## an Oscar
Unrated_index = which(IMDBdata$content_rating %in% "Unrated")
IMDBdata <- IMDBdata[-Unrated_index,]
NotRated_index = which(IMDBdata$content_rating %in% "Not Rated")
IMDBdata <- IMDBdata[-NotRated_index, ]
## missing "num_user_for_reviews"
###IMDBdata$movie_imdb_link[misNumUser_index]
names(IMDBdata)
## missing duration (imputation)
misDur_idx = which(is.na(IMDBdata$duration))
IMDBdata$duration[misDur_idx[1]] = 115
IMDBdata$duration[misDur_idx[2]] = 85
## missing gross
## a few observations:
## 1. movies with missing metascore but not Gross generally have bad user review
##
## 2.
misGrossCritic_idx = which(is.na(IMDBdata$metascore) & is.na(IMDBdata$gross))
IMDBdata$movie_imdb_link[misGrossCritic_idx]  #
rm('creidt_score')
rm('credit_score')
IMDBdata$imdb_score[misGrossCritic_idx]
IMDBdata$movie_imdb_link[misGrossCritic_idx] #
IMDBdata <- IMDBdata[-misGrossCritic_idx[180], ]
misGrossCritichighUser_idx = which(is.na(IMDBdata$metascore) &
is.na(IMDBdata$gross) &
(IMDBdata$imdb_score >= 6) )
misGrossCritichighUser_idx
IMDBdata$movie_imdb_link[misGrossCritichighUser_idx]
misGrosswMetascore_idx = which((!is.na(IMDBdata$metascore)) &
is.na(IMDBdata$gross))
misGrosswMetascore_idx
IMDBdata$movie_imdb_link[misGrosswMetascore_idx]
IMDBdata[misGrosswMetascore_idx[87],]
IMDBdata[misGrosswMetascore_idx[87],]
IMDBdata[misGrosswMetascore_idx[87] = 13888
IMDBdata[misGrosswMetascore_idx[87]] = 13888
IMDBdata$gross[misGrosswMetascore_idx[87]] = 13888
IMDBdata$gross[misGrosswMetascore_idx[86]] = 600896
IMDBdata$metascore[misGrosswMetascore_idx]
plot(IMDBdata$metascore[misGrosswMetascore_idx])
hist(IMDBdata$metascore[misGrosswMetascore_idx])
hist(IMDBdata$metascore[misGrosswMetascore_idx],
main = "Histogram of Metascore when Gross earnings are missing")
hist(IMDBdata$metascore[misGrosswMetascore_idx],
main = "Histogram of Metascore when Gross earnings are missing",
ylab = 'Metascore')
hist(IMDBdata$metascore[misGrosswMetascore_idx],
main = "Histogram of Metascore when Gross earnings are missing",
ylab = 'Metascore')
hist(IMDBdata$metascore[misGrosswMetascore_idx],
main = "Histogram of Metascore when Gross earnings are missing",
xlab = 'Metascore')
IMDBdata$metascore[misGrosswMetascore_idx] >= 6
IMDBdata$metascore[misGrosswMetascore_idx]
IMDBdata$metascore[misGrosswMetascore_idx] >= 60
table(IMDBdata$metascore[misGrosswMetascore_idx] >= 60)
boxplot(aspect_ratio)
unique(aspect_ratio)
unique(IMDBdata$country)
which(!(IMDBdata$country %in% "USA"))
which((IMDBdata$country %in% "USA"))
which(is.na(IMDBdata$country))
anyNA(IMDBdata$color)
unique(IMDBdata$color)
unique(IMDBdata$genres)
misGrosswMetascore_idx
IMDBdata$gross
IMDBdata$gross[ misGrosswMetascore_idx]
IMDBdata$movie_imdb_link[ misGrosswMetascore_idx]
misGrosswHighMeta_idx = which((!is.na(IMDBdata$metascore)) &
is.na(IMDBdata$gross) &
(IMDBdata$metascore >= 60) )
IMDBdata$movie_imdb_link[misGrosswHighMeta_idx]
IMDbdata$gross[misGrosswHighMeta_idx[1]] = 16003576
IMDBdata$gross[misGrosswHighMeta_idx[1]] = 16003576
IMDBdata$gross[misGrosswHighMeta_idx[12]] = 6870
IMDBdata$gross[misGrosswHighMeta_idx[15]] = 43073
IMDBdata <- IMDBdata[-misGrosswHighMeta_idx[10],]
save(IMDBdata, file = 'IMDBdata_NoMajorMis.Rdata')
save(IMDBdata, file = 'IMDBdata_MisAnalysed.Rdata')
load("IMDB_globes.RData")
