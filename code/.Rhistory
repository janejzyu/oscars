plot(myDat$x, myDat$y, pch = 19,
col = cols, cex = 0.08 * myDat$coal)
my.cols = palette(rainbow(208))
my.cols
plot(myDat$x, myDat$y, pch = 19,
col = my.cols[order(myDat$coal)], cex = 0.08 * myDat$coal)
rm(list = ls())
library(data.table)
library(scales)
library(RColorBrewer)
myDat <- fread('http://www.biostat.umn.edu/~brad/data/coal.ash.txt')
myDat <- myDat[order(x, y),]
my.cols = palette(rainbow(208))
cols = sapply(myDat$coal / max(myDat$coal), alpha, colour = my.cols)
plot(myDat$x, myDat$y, pch = 19,
col = my.cols[order(myDat$coal)], cex = 0.08 * myDat$coal)
# A color palette from blue to yellow to red
k <- 11
my.cols <- rev(brewer.pal(k, "RdYlBu"))
## compute 2D kernel density, see MASS book, pp. 130-131
z <- kde2d(myDat$x, myDat$y, n=50)
contour(z, drawlabels=FALSE, nlevels=k, col=my.cols, add=TRUE, lwd=2)
rm(list = ls())
library(data.table)
library(scales)
library(RColorBrewer)
myDat <- fread('http://www.biostat.umn.edu/~brad/data/coal.ash.txt')
myDat <- myDat[order(x, y),]
cols = sapply(myDat$coal / max(myDat$coal), alpha, colour = "red")
plot(myDat$x, myDat$y, pch = 19,
col = cols, cex = 0.08 * myDat$coal)
my.cols = colorRampPalette(c("blue", "red"))(nrow(myDat))
cols = sapply(myDat$coal / max(myDat$coal), alpha, colour = my.cols)
plot(myDat$x, myDat$y, pch = 19,
col = my.cols[order(myDat$coal)], cex = 0.08 * myDat$coal)
## compute 2D kernel density, see MASS book, pp. 130-131
z <- kde2d(myDat$x, myDat$y, n=50)
contour(z, drawlabels=FALSE, nlevels=5, col=my.cols, add=TRUE, lwd=2)
contour(z, drawlabels=FALSE, nlevels=5, col="black", add=TRUE, lwd=2)
contour(z, drawlabels=FALSE, nlevels=7, col="black", add=TRUE, lwd=2)
contour(z, drawlabels=FALSE, nlevels=6, col="black", add=TRUE, lwd=2)
plot(myDat$x, myDat$y, pch = 19,
col = my.cols[order(myDat$coal)], cex = 0.08 * myDat$coal)
## compute 2D kernel density, see MASS book, pp. 130-131
z <- kde2d(myDat$x, myDat$y, n=50)
contour(z, drawlabels=FALSE, nlevels=6, col="black", add=TRUE, lwd=2)
contour(z, drawlabels=FALSE, nlevels=7, col="black", add=TRUE, lwd=2)
plot(myDat$x, myDat$y, pch = 19,
col = my.cols[order(myDat$coal)], cex = 0.08 * myDat$coal)
## compute 2D kernel density, see MASS book, pp. 130-131
z <- kde2d(myDat$x, myDat$y, n=50)
contour(z, drawlabels=FALSE, nlevels=6, col="black", add=TRUE, lwd=2)
plot(myDat$x, myDat$y, pch = 19, xlab = "x", ylab = "y",
col = my.cols[order(myDat$coal)], cex = 0.08 * myDat$coal)
## compute 2D kernel density, see MASS book, pp. 130-131
z <- kde2d(myDat$x, myDat$y, n=50)
contour(z, drawlabels=FALSE, nlevels=6, col="black", add=TRUE, lwd=2)
hist(myDat$coal)
hist(myDat$coal, break = 25)
hist(myDat$coal, breaks = 25)
box(myDat$coal)
box.plot(myDat$coal)
boxplot(myDat$coal)
hist(myDat$coal, breaks = 25)
hist(myDat$coal, breaks = 30)
hist(myDat$coal, breaks = 30, xlab = "coal")
hist(myDat$coal, breaks = 30, xlab = "coal", main = "Histogram of Coal")
summary(myDat$coal)
summary(myDat$coal)
summary(myDat$coal)
install.packages("geoR")
library(geoR)
library(geoR)
variog
?variog
library("geoR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("XQuartz")
library(geoR)
install.packages("XQuartz")
13.99-3.5 + 2.99 + 6.99 + 5.99 + 17.42 + 7.99 + 13.29
rm(list = ls())
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE,
dimnames = list(1:5,
c("A", "B", "C")))
dat
table(dat)
dat = data.frame(dat)
dat$total = apply(dat, 1, sum)
View(dat)
library(VGAM)
install.packages("VGAM")
library(VGAM)
family=cumulative(parallel=TRUE), data=trauma)
rm(list = ls())
library(VGAM)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE,
dimnames = list(NULL,
c("A", "B", "C")))
dat = data.frame(dat)
View(dat)
rm(list = ls())
library(VGAM)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE
)
View(dat)
dat$hw = c(1:5)
rm(list = ls())
library(VGAM)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE,
dimnames = list(NULL,
c("A", "B", "C")))
dat = data.frame(dat)
dat$hw = c(1:5)
rm(list = ls())
library(VGAM)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE,
dimnames = list(NULL,
c("A", "B", "C")))
dat = data.frame(dat)
dat$hw = c(1:5)
View(dat)
View(dat)
rm(list = ls())
library(VGAM)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE,
dimnames = list(NULL,
c("A", "B", "C")))
dat = data.frame(dat)
dat$hw = c(1:5)
dat$total = apply(dat, 1, sum)
mod = vglm(cbind(A, B, C)~ hw,
family=cumulative(parallel=TRUE), data = dat)
mod
mod = vglm(cbind(A, B, C)~ as.factor(hw),
family=cumulative(parallel=TRUE), data = dat)
mod
?vglm
for (i in dat$hw) {
print(i)
}
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
dat2 = rbind(dat2, c(i, colnames(dat1), dat[i, j]))
}
}
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
dat2 = rbind(dat2, c(i, colnames(dat)[j], dat[i, j]))
}
}
View(dat2)
polr(V2 ~ V1, data=dat2, weight=V3)
library(MASS)
polr(V2 ~ V1, data=dat2, weight=V3)
class(dat2$V1)
class(dat2)
dat2 = as.data.frame(dat2)
View(dat2)
polr(V2 ~ V1, data=dat2, weight=V3)
dat2$V1
class(dat2$V1)
polr(V2 ~ as.numeric(V1), data=dat2, weight=V3)
as.numeric(V1)
polr(V2 ~ as.numeric(dat2$V1), data=dat2, weight=V3)
as.numeric(dat2$V1)
class(dat2$V3)
polr(V2 ~ as.numeric(dat2$V1), data=dat2, weight=as.numeric(dat2$V3))
mod2
#treat hw score as a nominal factor
mod1 = vglm(cbind(A, B, C) ~ as.factor(hw),
family=cumulative(parallel=TRUE), data = dat)
#treat hw score as a linear variable
mod2 = vglm(cbind(A, B, C) ~ hw,
family=cumulative(parallel=TRUE), data = dat)
mod2
rm(list = ls())
library(VGAM)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE,
dimnames = list(NULL,
c("A", "B", "C")))
dat = data.frame(dat)
dat$hw = c(1:5)
dat$total = apply(dat, 1, sum)
#treat hw score as a nominal factor
mod1 = vglm(cbind(A, B, C) ~ as.factor(hw),
family=cumulative(parallel=TRUE), data = dat)
#treat hw score as a linear variable
mod2 = vglm(cbind(A, B, C) ~ hw,
family=cumulative(parallel=TRUE), data = dat)
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
dat2 = rbind(dat2, c(i, colnames(dat)[j], dat[i, j]))
}
}
dat2 = as.data.frame(dat2)
dat2$V1 = as.numeric(dat2$V1)
dat2$V3 = as.numeric(dat2$V3)
polr(V2 ~ V1, data=dat2, weight=V3)
mod2
mod3 = polr(V2 ~ V1, data=dat2, weight=V3)
colnames(dat2) = c("hw", "grade", "weight")
dat2$grade
rm(list = ls())
library(VGAM)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE,
dimnames = list(NULL,
c("A", "B", "C")))
dat = data.frame(dat)
dat$hw = c(1:5)
dat$total = apply(dat, 1, sum)
#treat hw score as a nominal factor
mod1 = vglm(cbind(A, B, C) ~ as.factor(hw),
family=cumulative(parallel=TRUE), data = dat)
#treat hw score as a linear variable
mod2 = vglm(cbind(A, B, C) ~ hw,
family=cumulative(parallel=TRUE), data = dat)
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
dat2 = rbind(dat2, c(i, colnames(dat)[j], dat[i, j]))
}
}
dat2 = as.data.frame(dat2)
colnames(dat2) = c("hw", "grade", "weight")
dat2$hw = as.numeric(dat2$V1)
dat2$weight = as.numeric(dat2$weight)
mod3 = polr(grade ~ hw, data=dat2, weight=weight)
mod3
rm(list = ls())
library(VGAM)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE,
dimnames = list(NULL,
c("A", "B", "C")))
dat = data.frame(dat)
dat$hw = c(1:5)
dat$total = apply(dat, 1, sum)
#treat hw score as a nominal factor
mod1 = vglm(cbind(A, B, C) ~ as.factor(hw),
family=cumulative(parallel=TRUE), data = dat)
#treat hw score as a linear variable
mod2 = vglm(cbind(A, B, C) ~ hw,
family=cumulative(parallel=TRUE), data = dat)
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
dat2 = rbind(dat2, c(i, colnames(dat)[j], dat[i, j]))
}
}
dat2 = as.data.frame(dat2)
colnames(dat2) = c("hw", "grade", "weight")
dat2$hw = as.numeric(dat2$hw)
dat2$weight = as.numeric(dat2$weight)
mod3 = polr(grade ~ hw, data=dat2, weight=weight)
mod3
rm(list = ls())
library(VGAM)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE,
dimnames = list(NULL,
c("A", "B", "C")))
dat = data.frame(dat)
dat$hw = c(1:5)
dat$total = apply(dat, 1, sum)
#treat hw score as a nominal factor
mod1 = vglm(cbind(A, B, C) ~ as.factor(hw),
family=cumulative(parallel=TRUE), data = dat)
#treat hw score as a linear variable
mod2 = vglm(cbind(A, B, C) ~ hw,
family=cumulative(parallel=TRUE), data = dat)
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
dat2 = rbind(dat2, c(i, colnames(dat)[j], dat[i, j]))
}
}
dat2 = as.data.frame(dat2)
colnames(dat2) = c("hw", "grade", "weight")
dat2$weight = as.numeric(dat2$weight)
mod3 = polr(grade ~ hw, data=dat2, weight=weight)
mod4 = polr(grade ~ as.numeric(hw), data=dat2, weight=weight)
mod4
mod1
mod3
dat
dat[1,1,]
dat[1,1]
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
print (i)
print(j)
dat2 = rbind(dat2, c(i, colnames(dat)[j], dat[i, j]))
}
}
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
print (i)
print(j)
dat2 = rbind(dat2, c(i, colnames(dat)[j], dat[i, j]))
}
}
dat2
dat2 = as.data.frame(dat2)
colnames(dat2) = c("hw", "grade", "weight")
dat2$weight = as.numeric(dat2$weight)
mod3 = polr(grade ~ hw, data=dat2, weight=weight)
mod4 = polr(grade ~ as.numeric(hw), data=dat2, weight=weight)
mod1
mod3
View(dat2)
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
print (i)
print(j)
dat2 = rbind(dat2, c(i, colnames(dat)[j], dat[i, j]))
}
}
dat2
dat2 = as.data.frame(dat2)
dat2
colnames(dat2) = c("hw", "grade", "weight")
dat2$weight = as.numeric(dat2$weight)
View(dat2)
dat2
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
print (i)
print(j)
dat2 = rbind(dat2, c(i, colnames(dat)[j], dat[i, j]))
}
}
dat2 = as.data.frame(dat2)
colnames(dat2) = c("hw", "grade", "weight")
View(dat2)
as.numeric(dat2$weight)
dat2$weight
as.numeric(levels(dat2$weight))[dat2$weight]
rm(list = ls())
library(VGAM)
dat = matrix(c(39,35,16,
79,72,28,
114,143,38,
67,66,14,
141,131,36), 5,  byrow = TRUE,
dimnames = list(NULL,
c("A", "B", "C")))
dat = data.frame(dat)
dat$hw = c(1:5)
dat$total = apply(dat, 1, sum)
#treat hw score as a nominal factor
mod1 = vglm(cbind(A, B, C) ~ as.factor(hw),
family=cumulative(parallel=TRUE), data = dat)
#treat hw score as a linear variable
mod2 = vglm(cbind(A, B, C) ~ hw,
family=cumulative(parallel=TRUE), data = dat)
dat2 = NULL
for (i in dat$hw) {
for (j in 1:3) {
print (i)
print(j)
dat2 = rbind(dat2, c(i, colnames(dat)[j], dat[i, j]))
}
}
dat2 = as.data.frame(dat2)
colnames(dat2) = c("hw", "grade", "weight")
dat2$weight = as.numeric(levels(dat2$weight))[dat2$weight]
mod3 = polr(grade ~ hw, data=dat2, weight=weight)
mod4 = polr(grade ~ as.numeric(hw), data=dat2, weight=weight)
mod3
mod1
mod2
mod4
?vglm
?polyr
?polr
?vglm
?polr
polr(grade ~ hw, data=dat2, weight=weight,
method = c("loglog"))
polr(grade ~ hw, data=dat2, weight=weight,
method = c("logistic"))
mod1
mod3
polr(grade ~ hw, data=dat2, weight=weight,
method = c("logistic"))
polr(grade ~ hw, data=dat2, weight=weight,
method = c("loglog"))
mod5 = polr(grade ~ hw, data=dat2, weight=weight,
method = c("loglog"))
mod6 = polr(grade ~ hw, data=dat2, weight=weight,
method = c("cloglog"))
mod5
mod6
?clm
install.packages(ordinal)
install.packages("ordinal")
library(ordinal)
library(ordinal)
clm(grade ~ hw, weights = weight, dat = dat2)
mod3
mod4
clm(grade ~ hw, weights = weight, dat = dat2)
mod3
clm(grade ~ hw, weights = weight, dat = dat2, link="loglog")
clm(grade ~ hw, weights = weight, dat = dat2, link="cloglog")
clm(grade ~ hw, weights = weight, dat = dat2, link="loglog")
mod7 = clm(grade ~ hw, weights = weight, dat = dat2,
link="loglog")
mod7
mod5
mod7 = clm(grade ~ hw, weights = weight, dat = dat2,
link="loglog")
mod8 = clm(grade ~ as.numeric(hw), weights = weight, dat = dat2,
link="loglog")
mod8
mod4
mod6 = polr(grade ~ as.numeric(hw), data=dat2, weight=weight,
method = c("loglog"))
mod6
mod4
mod7$logLik
clm(grade ~ hw, weights = weight, dat = dat2,
link="logistics")$logLik
clm(grade ~ hw, weights = weight, dat = dat2,
link="logit")$logLik
rm(list = ls())
load("~/Google Drive/03Fall16/sta841/project/oscars/data/IMDBdata.rdata")
View(IMDBdata)
TVobs_index = which(grepl('TV\\-',IMDBdata$content_rating))
IMDBdata <- IMDBdata[-TVobs_index,]
TVobs_index = which(grepl('TV\\-',IMDBdata$content_rating))
IMDBdata$content_rating
rm(list = ls())
this.dir = dirname(parent.frame(2)$ofile)
setwd(this.dir)
load("../data/IMDBdata.RData")
source('~/Google Drive/03Fall16/sta841/project/oscars/code/main.r')
source('~/Google Drive/03Fall16/sta841/project/oscars/code/main.r')
load("../data/IMDBdata.RData")
IMDBdata$movie_title[162] = 'Wall E' #Wall E#
IMDBdata$movie_title[540] = "Deja Vu"
IMDBdata$movie_title[1129] = "Bruno"
IMDBdata$movie_title[617 + 2500] = 'Y Tu Mama Tambien'
IMDBdata$movie_title[347 + 2500]   ### 28 days later
IMDBdata$movie_title[281 + 3500] ###"For a Good Time, Call..."
IMDBdata$movie_title[239 + 3500]  ### "The Helix... Loaded"
IMDBdata$movie_title[4003] = "Antarctic Edge: 70 South"
IMDBdata <- IMDBdata[-60,]
names(IMDBdata)[24] = 'year'
names(IMDBdata)[12] = 'title'
title_col_index = which(names(IMDBdata) %in% 'title')
col_index = 1:ncol(IMDBdata)
col_index[1] = title_col_index
col_index[title_col_index] = 1
IMDBdata = IMDBdata[,col_index]
# remove observations that are TV series, not movies
# this is not exhaustive
TVobs_index = which(grepl('TV\\-',IMDBdata$content_rating))
IMDBdata <- IMDBdata[-TVobs_index,]
save(IMDBdata, file="IMDBdata.RData")
load("../data/IMDBdata.RData")
#metascore = NULL
